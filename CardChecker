// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:

function validateCred(cardNumber) {
  // Make a copy of the original array
  const digits = cardNumber.slice();

  // Step 1: Double every other digit, starting from the rightmost digit
  for (let i = digits.length - 2; i >= 0; i -= 2) {
    let doubledDigit = digits[i] * 2;

    // If the doubled digit is greater than 9, subtract 9
    if (doubledDigit > 9) {
      doubledDigit -= 9;
    }

    digits[i] = doubledDigit;
  }

  // Step 2: Sum all the digits
  const sum = digits.reduce((accumulator, current) => accumulator + current, 0);

  // Step 3: Check if the sum is divisible by 10
  return sum % 10 === 0;
};

console.log(validateCred(valid1));    // Output: true
console.log(validateCred(invalid1));  // Output: false
console.log(validateCred(mystery1));  // Output: true (can be either valid or invalid)

function findInvalidCards(batch) {
  const invalidCards = [];

  for (let i = 0; i < batch.length; i++) {
    const cardNumber = batch[i];

    if (!validateCred(cardNumber)) {
      invalidCards.push(cardNumber);
    }
  }

  return invalidCards;
};

const invalidCards = findInvalidCards(batch);
console.log(invalidCards);

function idInvalidCardCompanies(invalidCards) {
  const companies = [];

  for (let i = 0; i < invalidCards.length; i++) {
    const cardNumber = invalidCards[i];

    // Get the first digit of the card number to identify the company
    const firstDigit = cardNumber[0];

    let companyName = '';

    // Match the first digit to the respective company
    switch (firstDigit) {
      case 3:
        companyName = 'Amex (American Express)';
        break;
      case 4:
        companyName = 'Visa';
        break;
      case 5:
        companyName = 'Mastercard';
        break;
      case 6:
        companyName = 'Discover';
        break;
      default:
        companyName = 'Company not found';
        break;
    }

    // Add the company to the list if it's not already included
    if (!companies.includes(companyName)) {
      companies.push(companyName);
    }
  }

  return companies;
};

const invalidCards = findInvalidCards(batch);
const invalidCompanies = idInvalidCardCompanies(invalidCards);
console.log(invalidCompanies);

